{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Layout/Layout.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Layout/Layout.js","components/Layout/Section.jsx","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","changeFilter","createAction","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","contacts","createReducer","_","payload","state","filter","id","isLoading","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","rootReducer","devTools","process","axios","defaults","baseURL","getContacts","getIsLoading","getFilter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","getIsAdded","map","Layout","children","className","s","container","Section","title","ContactsForm","useState","setName","phone","setPhone","isAdded","useSelector","dispatch","useDispatch","handleSubmit","e","preventDefault","alert","post","then","data","catch","error","addContact","form","onSubmit","htmlFor","type","value","onChange","target","input","disabled","ContactsList","filterContacts","nameText","onClick","delete","deleteContacts","Filter","text","App","useEffect","get","color","height","width","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c790fb9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__Xbh-d\",\"input\":\"ContactForm_input__2dC7r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__24U58\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameText\":\"ContactsList_nameText__2c45d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__BvATb\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\nexport const addContactsError = createAction('contacts/addContactsError');\n\nexport const deleteContactsRequest = createAction(\n  'contacts/deleteContactsRequest',\n);\nexport const deleteContactsSuccess = createAction(\n  'contacts/deleteContactsSuccess',\n);\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport {\n  changeFilter,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n} from './contacts-actions';\n\nconst contacts = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactsSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst isLoading = createReducer(false, {\n  [addContactsRequest]: () => true,\n  [addContactsSuccess]: () => false,\n  [addContactsError]: () => false,\n\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n\n  [deleteContactsRequest]: () => true,\n  [deleteContactsSuccess]: () => false,\n  [deleteContactsError]: () => false,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n  isLoading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import axios from 'axios';\nimport {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:3000';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact = (name, phone) => dispatch => {\n  const contact = { name, phone };\n\n  dispatch(addContactsRequest());\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\n    .catch(error => dispatch(addContactsError(error)));\n};\n\nexport const deleteContacts = id => dispatch => {\n  dispatch(deleteContactsRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactsSuccess(id)))\n    .catch(error => dispatch(deleteContactsError(error)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts;\n\nexport const getIsLoading = state => state.isLoading;\n\nexport const getFilter = state => state.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n\nexport const getIsAdded = createSelector([getContacts], contacts => {\n  const isAdded = name => contacts.map(contact => contact.name).includes(name);\n  return isAdded;\n});\n","import s from './Layout.module.css';\n\nconst Layout = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nexport default Layout;\n","import propTypes from 'prop-types';\nexport default function Section({ children, title }) {\n  return (\n    <section>\n      {title ? <h2>{title}</h2> : null}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: propTypes.string,\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getIsAdded } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const isAdded = useSelector(getIsAdded);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isAdded(name)) {\n      return alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact(name, phone));\n    }\n\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <>\n      <form className={s.form} onSubmit={e => handleSubmit(e)}>\n        <label id=\"name\" htmlFor=\"name\">\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n        <label id=\"phone\" htmlFor=\"phone\">\n          Phone\n        </label>\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"phone\"\n          id=\"phone\"\n          value={phone}\n          onChange={e => setPhone(e.target.value)}\n        />\n        <button type=\"submit\" disabled={!(name && phone)}>\n          add contact\n        </button>\n      </form>\n    </>\n  );\n}\n\nContactsForm.propTypes = {\n  onAddContacts: propTypes.func,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/contacts-operations';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport propTypes from 'prop-types';\nimport s from './ContactsList.module.css';\n\nexport default function ContactsList() {\n  const filterContacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ul>\n        {filterContacts.map(({ id, name, phone }) => (\n          <li key={id}>\n            <p className={s.nameText}>\n              {name}: <span>{phone}</span>\n            </p>\n            <button type=\"button\" onClick={() => dispatch(deleteContacts(id))}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactsList.propTypes = {\n  onDeleteBtn: propTypes.func,\n  contacts: propTypes.arrayOf(\n    propTypes.exact({\n      id: propTypes.string,\n      name: propTypes.string,\n      phone: propTypes.string,\n    }),\n  ),\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <label className={s.text} name=\"filter\" htmlFor=\"filter\" value={filter}>\n        Find contacts by name\n      </label>\n      <input\n        value={filter}\n        type=\"text\"\n        id=\"filter\"\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from './redux/contacts/contacts-operations';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport { getContacts, getIsLoading } from './redux/contacts/contacts-selectors';\nimport Loader from 'react-loader-spinner';\nimport Layout from './components/Layout/Layout';\nimport Section from './components/Layout/Section';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Layout>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n\n      {isLoading ? (\n        <Loader type=\"Rings\" color=\"#00BFFF\" height={80} width={80} />\n      ) : null}\n\n      {contacts.length ? (\n        <Section title=\"Contacts\">\n          <Filter />\n          <ContactsList />\n        </Section>\n      ) : null}\n    </Layout>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}